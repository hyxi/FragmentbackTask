apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//apply from: '../buildsystem/fat-aar.gradle'
//apply from: '../buildsystem/pins.gradle'
//apply plugin: 'me.tatarka.retrolambda'//加上这句加,入plugin声明
repositories {
    flatDir {
        dir 'libs'
    }
    mavenCentral()
}
android {
    compileSdkVersion 28
    buildToolsVersion rootProject.ext.version["buildToolsVersion"]

    sourceSets {
        main {
            jniLibs.srcDir 'libs'
//            jni.srcDirs = ['src/main/jni', 'src/main/jniLibs/']
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.example.user.fragmentbacktask"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a', 'x86_64'
            universalApk true
        }
    }
    signingConfigs {
        //release
        debug {
            storeFile file("../keystore/test.keystore")
            storePassword '123456'
            keyAlias "test"
            keyPassword '123456'
        }
        release {
            storeFile file("../keystore/test.keystore")
            storePassword "123456"
            keyAlias "test"
            keyPassword "123456"
        }
    }

//    flavorDimensions "mode"
//    productFlavors {
//        dev {
//            resConfigs("en", "xxhdpi")
//            dimension "mode"
//        }
//        full {
//            dimension "mode"
//        }
//    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            manifestPlaceholders = [app_label: "@string/app_name_debug"]
            signingConfig signingConfigs.debug
        }
        release {
            manifestPlaceholders = [app_label: "@string/app_name"]
            signingConfig signingConfigs.release
        }
    }
    dependencies {
        api fileTree(dir: 'libs', include: ['*.jar'])
        androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
            exclude group: 'com.android.support', module: 'support-annotations'
        })
        configurations {
            all*.exclude group: 'com.google.code.gson'
        }
//        implementation project(':librarytwo')
        implementation project(':library')
        implementation project(':iconlib')

        implementation project(':apt_api')
        kapt project(':apt_process')
        implementation project(':apt_annotation')

        def room_version = "1.1.0"
        def paging_version = "1.0.0"
        def lifecycle_version = "1.1.1"

        implementation "android.arch.persistence.room:runtime:$room_version"
        kapt "android.arch.persistence.room:compiler:$room_version"
        implementation "android.arch.persistence.room:rxjava2:$room_version"
        implementation "android.arch.lifecycle:extensions:$lifecycle_version"
        //Paging的依赖
        implementation "android.arch.paging:runtime:$paging_version"

        debugImplementation 'com.facebook.stetho:stetho:1.5.1'

        implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
        implementation "android.arch.work:work-runtime:1.0.1"
//        implementation 'com.android.support.constraint:constraint-layout:1.1.3'
//        implementation project(path: ':library', configuration: 'default')
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${rootProject.ext.kotlin_version}"
        implementation 'com.android.support:multidex:1.0.3'
        implementation "com.android.support:appcompat-v7:${rootProject.ext.version["supportLibsVersion"]}"
        implementation "com.android.support:design:${rootProject.ext.version["supportLibsVersion"]}"
        implementation "com.android.support:recyclerview-v7:${rootProject.ext.version["supportLibsVersion"]}"

        implementation 'com.github.promeg:tinypinyin:2.0.3' // TinyPinyin核心包，约80KB

        implementation 'com.orhanobut:logger:2.2.0'
        implementation 'com.androidadvance:topsnackbar:1.1.1'

        implementation 'com.github.yalantis:ucrop:2.2.1'
        implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
        implementation 'com.trello.rxlifecycle3:rxlifecycle:3.0.0'
        implementation 'com.trello.rxlifecycle3:rxlifecycle-components:3.0.0'

        implementation 'org.greenrobot:eventbus:3.1.1'

//        implementation 'com.google.dagger:dagger-android:2.17'
        implementation 'com.google.dagger:dagger-android-support:2.17'
        // if you use the support libraries
        implementation 'com.google.dagger:dagger:2.17'
        kapt 'com.google.dagger:dagger-compiler:2.17'
        kapt 'com.google.dagger:dagger-android-processor:2.17'

        implementation 'com.irozon.sneaker:sneaker:1.0.3'

        implementation 'com.github.bumptech.glide:glide:4.8.0'
        kapt 'com.github.bumptech.glide:compiler:4.8.0'

        implementation 'com.google.code.gson:gson:2.8.5'
        implementation 'com.squareup.okhttp3:okhttp:3.11.0'
        implementation 'com.squareup.okio:okio:1.14.0'

        implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.version["rxJavaVersion"]}"
        implementation "io.reactivex.rxjava2:rxjava:${rootProject.ext.version["rxJavaVersion"]}"

        implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.version["retrofitVersion"]}"
        implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.version["retrofitVersion"]}"
        implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.ext.version["retrofitVersion"]}"

        debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
        releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
        testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'

        implementation "com.jakewharton:butterknife:${rootProject.ext.butterknife_version}"
        kapt "com.jakewharton:butterknife-compiler:${rootProject.ext.butterknife_version}"
    }
}
/**
 * 加载签名配置文件
 */
//def loadSigningConfigs() {
//    def Properties props = new Properties()
//    def propFile = file('../signing.properties')
//    if (propFile.canRead()) {
//        props.load(new FileInputStream(propFile))
//        if (props != null && props.containsKey('RELEASE_STORE_FILE') && props.containsKey('RELEASE_STORE_PASSWORD') &&
//                props.containsKey('RELEASE_KEY_ALIAS') && props.containsKey('RELEASE_KEY_PASSWORD')) {
//            android.signingConfigs.myConfig.storeFile = file(props['RELEASE_STORE_FILE'])
//            android.signingConfigs.myConfig.storePassword = props['RELEASE_STORE_PASSWORD']
//            android.signingConfigs.myConfig.keyAlias = props['RELEASE_KEY_ALIAS']
//            android.signingConfigs.myConfig.keyPassword = props['RELEASE_KEY_PASSWORD']
//        } else {
//            android.buildTypes.release.signingConfig = null
//        }
//    } else {
//        android.buildTypes.release.signingConfig = null
//    }
//}
task hello {
    doLast {
        println 'Hello world!'
    }
}
task intro(dependsOn: hello) {
    doLast {
        println "I'm Gradle"
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:+'
    implementation 'androidx.constraintlayout:constraintlayout:+'
}
